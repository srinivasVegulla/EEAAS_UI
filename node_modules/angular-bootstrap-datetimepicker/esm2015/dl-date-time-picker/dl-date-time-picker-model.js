/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright 2013-present Dale Lotts All Rights Reserved.
 * http://www.dalelotts.com
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE
 */
/**
 * Interface that represents the model for every view in a date/time picker.
 *
 * This interface should probably be broken up into several classes.
 * @record
 */
export function DlDateTimePickerModel() { }
if (false) {
    /**
     * The date value of the currently active cell in the model.
     * @type {?}
     */
    DlDateTimePickerModel.prototype.activeDate;
    /**
     * Represent the configuration for the left button.
     * @type {?}
     */
    DlDateTimePickerModel.prototype.leftButton;
    /**
     * Represents the configuration for the right button.
     * @type {?}
     */
    DlDateTimePickerModel.prototype.rightButton;
    /**
     * Optional row labels.
     * Used to include the weekday labels in the `day` view
     * @type {?|undefined}
     */
    DlDateTimePickerModel.prototype.rowLabels;
    /**
     * The rows in the current view.
     * @type {?}
     */
    DlDateTimePickerModel.prototype.rows;
    /**
     * Represent the configuration for the up button.
     * @type {?|undefined}
     */
    DlDateTimePickerModel.prototype.upButton;
    /**
     * The label displayed in the top-center of the date/time picker
     * @type {?}
     */
    DlDateTimePickerModel.prototype.viewLabel;
    /**
     * The name of the view represented by this model.
     * @type {?}
     */
    DlDateTimePickerModel.prototype.viewName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS10aW1lLXBpY2tlci1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLyIsInNvdXJjZXMiOlsiZGwtZGF0ZS10aW1lLXBpY2tlci9kbC1kYXRlLXRpbWUtcGlja2VyLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSwyQ0F5RkM7Ozs7OztJQXJGQywyQ0FBbUI7Ozs7O0lBSW5CLDJDQWdCRTs7Ozs7SUFJRiw0Q0FpQkU7Ozs7OztJQUtGLDBDQUFxQjs7Ozs7SUFJckIscUNBS0c7Ozs7O0lBSUgseUNBaUJFOzs7OztJQUlGLDBDQUFrQjs7Ozs7SUFJbEIseUNBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCBEYWxlIExvdHRzIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBodHRwOi8vd3d3LmRhbGVsb3R0cy5jb21cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vZGFsZWxvdHRzL2FuZ3VsYXItYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQge0RhdGVCdXR0b259IGZyb20gJy4vZGwtZGF0ZS10aW1lLXBpY2tlci1kYXRlLWJ1dHRvbic7XG5cbi8qKlxuICogSW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgbW9kZWwgZm9yIGV2ZXJ5IHZpZXcgaW4gYSBkYXRlL3RpbWUgcGlja2VyLlxuICpcbiAqIFRoaXMgaW50ZXJmYWNlIHNob3VsZCBwcm9iYWJseSBiZSBicm9rZW4gdXAgaW50byBzZXZlcmFsIGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGxEYXRlVGltZVBpY2tlck1vZGVsIHtcbiAgLyoqXG4gICAqIFRoZSBkYXRlIHZhbHVlIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNlbGwgaW4gdGhlIG1vZGVsLlxuICAgKi9cbiAgYWN0aXZlRGF0ZTogbnVtYmVyO1xuICAvKipcbiAgICogUmVwcmVzZW50IHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgbGVmdCBidXR0b24uXG4gICAqL1xuICBsZWZ0QnV0dG9uOiB7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGZvciB0aGUgbW9kZWwgdG8gdGhlIGxlZnQgb2YgdGhpcyBtb2RlbC5cbiAgICAgKi9cbiAgICB2YWx1ZTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFjY2Vzc2libGUgbGFiZWwgZm9yIHRoZSBsZWZ0IGJ1dHRvbi5cbiAgICAgKiBVc2VkIGJ5IHNjcmVlbiByZWFkZXJzLlxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNsYXNzZXMgdG8gYWRkIHRvIHRoZSBsZWZ0IGJ1dHRvblxuICAgICAqL1xuICAgIGNsYXNzZXM6IHt9O1xuICB9O1xuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIHJpZ2h0IGJ1dHRvbi5cbiAgICovXG4gIHJpZ2h0QnV0dG9uOiB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoZSBtb2RlbCB0byB0aGUgcmlnaHQgdGhpcyBtb2RlbC5cbiAgICAgKi9cbiAgICB2YWx1ZTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFjY2Vzc2libGUgbGFiZWwgZm9yIHRoZSByaWdodCBidXR0b24uXG4gICAgICogVXNlZCBieSBzY3JlZW4gcmVhZGVycy5cbiAgICAgKi9cbiAgICBhcmlhTGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjbGFzc2VzIHRvIGFkZCB0byB0aGUgdXAgYnV0dG9uXG4gICAgICovXG4gICAgY2xhc3Nlczoge307XG4gIH07XG4gIC8qKlxuICAgKiBPcHRpb25hbCByb3cgbGFiZWxzLlxuICAgKiBVc2VkIHRvIGluY2x1ZGUgdGhlIHdlZWtkYXkgbGFiZWxzIGluIHRoZSBgZGF5YCB2aWV3XG4gICAqL1xuICByb3dMYWJlbHM/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSByb3dzIGluIHRoZSBjdXJyZW50IHZpZXcuXG4gICAqL1xuICByb3dzOiBBcnJheTx7XG4gICAgLyoqXG4gICAgICogVGhlIGNlbGxzIGluIHRoZSBjdXJyZW50IHJvdy5cbiAgICAgKi9cbiAgICBjZWxsczogQXJyYXk8RGF0ZUJ1dHRvbj5cbiAgfT47XG4gIC8qKlxuICAgKiBSZXByZXNlbnQgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB1cCBidXR0b24uXG4gICAqL1xuICB1cEJ1dHRvbj86IHtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhlIG1vZGVsIGFib3ZlIHRoaXMgbW9kZWwuXG4gICAgICovXG4gICAgdmFsdWU6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhY2Nlc3NpYmxlIGxhYmVsIGZvciB0aGUgdXAgYnV0dG9uLlxuICAgICAqIFVzZWQgYnkgc2NyZWVuIHJlYWRlcnMuXG4gICAgICovXG4gICAgYXJpYUxhYmVsOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2xhc3NlcyB0byBhZGQgdG8gdGhlIHVwIGJ1dHRvblxuICAgICAqL1xuICAgIGNsYXNzZXM6IHt9O1xuICB9O1xuICAvKipcbiAgICogVGhlIGxhYmVsIGRpc3BsYXllZCBpbiB0aGUgdG9wLWNlbnRlciBvZiB0aGUgZGF0ZS90aW1lIHBpY2tlclxuICAgKi9cbiAgdmlld0xhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdmlldyByZXByZXNlbnRlZCBieSB0aGlzIG1vZGVsLlxuICAgKi9cbiAgdmlld05hbWU6IHN0cmluZztcbn1cbiJdfQ==