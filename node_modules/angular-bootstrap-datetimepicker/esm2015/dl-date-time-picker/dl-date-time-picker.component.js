/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright 2013-present Dale Lotts All Rights Reserved.
 * http://www.dalelotts.com
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _moment from 'moment';
import { take } from 'rxjs/operators';
import { DlDateAdapter } from '../core/public-api';
import { DlDateTimePickerChange } from './dl-date-time-picker-change';
import { DlDayModelProvider } from './dl-model-provider-day';
import { DlHourModelProvider } from './dl-model-provider-hour';
import { DlMinuteModelProvider } from './dl-model-provider-minute';
import { DlMonthModelProvider } from './dl-model-provider-month';
import { DlYearModelProvider } from './dl-model-provider-year';
/**
 * Work around for moment namespace conflict when used with webpack and rollup.
 * See https://github.com/dherges/ng-packagr/issues/163
 *
 * Depending on whether rollup is used, moment needs to be imported differently.
 * Since Moment.js doesn't have a default export, we normally need to import using
 * the `* as`syntax.
 *
 * rollup creates a synthetic default module and we thus need to import it using
 * the `default as` syntax.
 *
 * \@internal
 *
 * @type {?}
 */
const moment = _moment;
/**
 * Maps key codes to the model provider function name
 * that should be called to perform the action.
 *
 * \@internal
 *
 * @type {?}
 */
const keyCodeToModelProviderMethod = {
    'ArrowDown': 'goDown',
    'ArrowLeft': 'goLeft',
    'ArrowRight': 'goRight',
    'ArrowUp': 'goUp',
    'Down': 'goDown',
    'End': 'goEnd',
    'Home': 'goHome',
    'Left': 'goLeft',
    'PageDown': 'pageDown',
    'PageUp': 'pageUp',
    'Right': 'goRight',
    'Up': 'goUp',
    33: 'pageUp',
    34: 'pageDown',
    35: 'goEnd',
    36: 'goHome',
    37: 'goLeft',
    38: 'goUp',
    39: 'goRight',
    40: 'goDown',
};
/**
 * List of view names for the calendar.
 *
 * This list must be in order from
 * smallest increment of time to largest increment of time.
 *
 * \@internal
 *
 * @type {?}
 */
const VIEWS = [
    'minute',
    'hour',
    'day',
    'month',
    'year'
];
/**
 * Component that provides all of the user facing functionality of the date/time picker.
 * @template D
 */
export class DlDateTimePickerComponent {
    /**
     * Used to construct a new instance of a date/time picker.
     *
     * @param {?} _elementRef
     *  reference to this element.
     * @param {?} _ngZone
     *  reference to an NgZone instance used to select the active element outside of angular.
     * @param {?} _dateAdapter
     *  date adapter for the date type in the model.
     * @param {?} yearModelComponent
     *  provider for the year view model.
     * @param {?} monthModelComponent
     *  provider for the month view model.
     * @param {?} dayModelComponent
     *  provider for the day view model.
     * @param {?} hourModelComponent
     *  provider for the hour view model.
     * @param {?} minuteModelComponent
     *  provider for the minute view model.
     */
    constructor(_elementRef, _ngZone, _dateAdapter, yearModelComponent, monthModelComponent, dayModelComponent, hourModelComponent, minuteModelComponent) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._dateAdapter = _dateAdapter;
        this.yearModelComponent = yearModelComponent;
        this.monthModelComponent = monthModelComponent;
        this.dayModelComponent = dayModelComponent;
        this.hourModelComponent = hourModelComponent;
        this.minuteModelComponent = minuteModelComponent;
        /**
         * Change listener callback functions registered
         * via `registerOnChange`
         * \@internal
         *
         */
        this._changed = [];
        /**
         * Maps view name to the next view (the view for the next smallest increment of time).
         * \@internal
         *
         */
        this._nextView = {
            'year': 'month',
            'month': 'day',
            'day': 'hour',
            'hour': 'minute'
        };
        /**
         * Maps view name to the previous view (the view for the next largest increment of time).
         * \@internal
         *
         */
        this._previousView = {
            'minute': 'hour',
            'hour': 'day',
            'day': 'month',
            'month': 'year'
        };
        /**
         * Touch listener callback functions registered
         * via `registerOnChange`
         * \@internal
         *
         */
        this._touched = [];
        /**
         * Emits when a `change` event when date/time is selected or
         * the value of the date/time picker changes.
         *
         */
        this.change = new EventEmitter();
        /**
         * Specifies the classes used to display the left icon.
         *
         * This component uses OPENICONIC https://useiconic.com/open
         * by default but any icon library may be used.
         */
        this.leftIconClass = [
            'oi',
            'oi-chevron-left'
        ];
        /**
         * The highest view that the date/time picker can show.
         * Setting this to a view less than year could make it more
         * difficult for the end-user to navigate to certain dates.
         */
        this.maxView = 'year';
        /**
         * The view that will be used for date/time selection.
         *
         * The default of `minute  means that selection will not happen
         * until the end-user clicks on a cell in the minute view.
         *
         * for example, if you want the end-user to select a only day (date),
         * setting `minView` to `day` will cause selection to happen when the
         * end-user selects a cell in the day view.
         *
         * NOTE: This must be set lower than or equal to `startView'
         */
        this.minView = 'minute';
        /**
         * The number of minutes between each `.dl-abdtp-minute` button.
         *
         * Must be greater than `0` and less than `60`.
         */
        this.minuteStep = 5;
        /**
         * Specifies the classes used to display the right icon.
         *
         * This component uses OPENICONIC https://useiconic.com/open
         * by default but any icon library may be used.
         */
        this.rightIconClass = [
            'oi',
            'oi-chevron-right'
        ];
        /* tslint:disable:member-ordering */
        /**
         *  Determine whether or not the `DateButton` is selectable by the end user.
         */
        this.selectFilter = (/**
         * @return {?}
         */
        () => true);
        /**
         * The initial view that the date/time picker will show.
         * The picker will also return to this view after a date/time
         * is selected.
         *
         * NOTE: This must be set lower than or equal to `maxView'
         */
        this.startView = 'day';
        /**
         * Specifies the classes used to display the up icon.
         *
         * This component uses OPENICONIC https://useiconic.com/open
         * by default but any icon library may be used.
         */
        this.upIconClass = [
            'oi',
            'oi-chevron-top'
        ];
        this._viewToModelProvider = {
            year: yearModelComponent,
            month: monthModelComponent,
            day: dayModelComponent,
            hour: hourModelComponent,
            minute: minuteModelComponent,
        };
    }
    /* tslint:enable:member-ordering */
    /**
     * Set's the model for the current view after applying the selection filter.
     *
     * \@internal
     *
     * @private
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        this._model = this.applySelectFilter(model);
    }
    /**
     * Returns `D` value of the date/time picker or undefined/null if no value is set.
     *
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * Sets value of the date/time picker and emits a change event if the
     * new value is different from the previous value.
     *
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this.model = this._viewToModelProvider[this._model.viewName].getModel(this.getStartDate(), this.valueOf);
            this._changed.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => f(value)));
            this.change.emit(new DlDateTimePickerChange(value));
        }
    }
    /**
     * Returns `milliseconds` value of the date/time picker or undefined/null if no value is set.
     *
     * @return {?}
     */
    get valueOf() {
        return this._dateAdapter.toMilliseconds(this._value);
    }
    /**
     * Applies the `selectionFilter` by adding the `dl-abdtp-disabled`
     * class to any `DateButton` where `selectFilter` returned false.
     *
     * \@internal
     * @private
     * @param {?} model
     *  the new model
     *
     * @return {?}
     *  the supplied model with zero or more `DateButton`'s
     *  having the `dl-abdtp-disabled` class set to `true` if the
     *  selection for that date should be disabled.
     *
     */
    applySelectFilter(model) {
        if (this.selectFilter) {
            model.rows = model.rows.map((/**
             * @param {?} row
             * @return {?}
             */
            (row) => {
                row.cells.map((/**
                 * @param {?} dateButton
                 * @return {?}
                 */
                (dateButton) => {
                    /** @type {?} */
                    const disabled = !this.selectFilter(dateButton, model.viewName);
                    dateButton.classes['dl-abdtp-disabled'] = disabled;
                    if (disabled) {
                        dateButton.classes['aria-disabled'] = true;
                    }
                    return dateButton;
                }));
                return row;
            }));
        }
        return model;
    }
    /**
     * Focuses the `.dl-abdtp-active` cell after the microtask queue is empty.
     * \@internal
     *
     * @private
     * @return {?}
     */
    focusActiveCell() {
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**
             * @return {?}
             */
            () => {
                this._elementRef.nativeElement.querySelector('.dl-abdtp-active').focus();
            }));
        }));
    }
    /**
     * Determines the start date for the picker.
     * \@internal
     *
     * @private
     * @return {?}
     */
    getStartDate() {
        if (hasValue(this._value)) {
            return this._dateAdapter.toMilliseconds(this._value);
        }
        if (hasValue(this.startDate)) {
            return this.startDate;
        }
        return moment().valueOf();
    }
    /**
     * Determine the start view for the picker
     * @private
     * @return {?}
     *  the largest time increment view between the `minView` or `minute` view and the `startView` or `day` view.
     */
    getStartView() {
        /** @type {?} */
        const startIndex = Math.max(VIEWS.indexOf(this.minView || 'minute'), VIEWS.indexOf(this.startView || 'day'));
        return VIEWS[startIndex];
    }
    /**
     * Calls all registered `touch` callback functions.
     * \@internal
     *
     * @private
     * @return {?}
     */
    onTouch() {
        this._touched.forEach((/**
         * @param {?} onTouched
         * @return {?}
         */
        (onTouched) => onTouched()));
    }
    /**
     * Receives configuration changes detected by Angular and passes the changes on
     * to the model providers so the provider is aware of any necessary configuration
     * changes (i.e. minuteStep)
     *
     * @param {?} changes
     *  the input changes detected by Angular.
     * @return {?}
     */
    ngOnChanges(changes) {
        Object.keys(this._viewToModelProvider)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        (key) => this._viewToModelProvider[key]))
            .forEach((/**
         * @param {?} provider
         * @return {?}
         */
        (provider) => provider.onChanges(changes)));
        if (this._model) { // only update the model after ngOnInit has set it the first time.
            this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.activeDate, this.valueOf);
        }
    }
    /**
     * Sets the initial model.
     *
     * \@internal
     *
     * @return {?}
     */
    ngOnInit() {
        this.model = this._viewToModelProvider[this.getStartView()].getModel(this.getStartDate(), this.valueOf);
    }
    /**
     * Handles click (and enter & space key down) events on the date elements.
     *
     * If the current view is the minimum view then the date value is selected
     * and the picker returns to the start view.
     *
     * Otherwise the picker displays the next view with the next
     * smallest time increment.
     *
     * \@internal
     *
     * @param {?} dateButton
     * @return {?}
     */
    _onDateClick(dateButton) {
        if (dateButton.classes['dl-abdtp-disabled']) {
            return;
        }
        /** @type {?} */
        let nextView = this._nextView[this._model.viewName];
        if ((this.minView || 'minute') === this._model.viewName) {
            this.value = this._dateAdapter.fromMilliseconds(dateButton.value);
            nextView = this.startView;
        }
        this.model = this._viewToModelProvider[nextView].getModel(dateButton.value, this.valueOf);
        this.onTouch();
    }
    /**
     * Handles click (and enter & space key down) events on the left button.
     *
     * Changes the displayed time range of the picker to the previous time range.
     * For example, in year view, the previous decade is displayed.
     *
     * \@internal
     *
     * @return {?}
     */
    _onLeftClick() {
        this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.leftButton.value, this.valueOf);
        this.onTouch();
    }
    /**
     * Handles click (and enter & space key down) events on the up button.
     *
     * Changes the view of the picker to the next largest time increment.
     * For example, in day view, the next view displayed will be month view.
     *
     * \@internal
     *
     * @return {?}
     */
    _onUpClick() {
        this.model = this._viewToModelProvider[this._previousView[this._model.viewName]].getModel(this._model.upButton.value, this.valueOf);
    }
    /**
     * Handles click (and enter & space key down) events on the right button.
     *
     * Changes the displayed time range of the picker to the next time range.
     * For example, in year view, the next decade is displayed.
     *
     * \@internal
     *
     * @return {?}
     */
    _onRightClick() {
        this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.rightButton.value, this.valueOf);
        this.onTouch();
    }
    /**
     * Handles various key down events to move the `active date` around the calendar.
     *
     * \@internal
     *
     * @param {?} $event
     * @return {?}
     */
    _handleKeyDown($event) {
        /** @type {?} */
        const functionName = keyCodeToModelProviderMethod[$event.key];
        if (functionName) {
            /** @type {?} */
            const modelProvider = this._viewToModelProvider[this._model.viewName];
            this.model = modelProvider[functionName](this._model.activeDate, this.valueOf);
            this.focusActiveCell();
            // Prevent unexpected default actions such as form submission.
            $event.preventDefault();
        }
    }
    /**
     * Implements ControlValueAccessor.registerOnChange to register change listeners.
     * \@internal
     *
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._changed.push(fn);
    }
    /**
     * Implements ControlValueAccessor.registerOnTouched to register touch listeners.
     * \@internal
     *
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._touched.push(fn);
    }
    /**
     * Implements ControlValueAccessor.writeValue to store the value from the model.
     * \@internal
     *
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
}
DlDateTimePickerComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: DlDateTimePickerComponent,
                        multi: true
                    }
                ],
                selector: 'dl-date-time-picker',
                template: "<div class=\"text-center dl-abdtp-{{_model.viewName}}-view\" [attr.data-dl-abdtp-view]=\"_model.viewName\">\n  <div class=\"row align-items-center no-gutters\">\n    <button class=\"col dl-abdtp-left-button align-items-center\"\n            type=\"button\"\n            [attr.aria-label]=\"_model.leftButton.ariaLabel\"\n            [attr.dl-abdtp-value]=\"_model.leftButton.value\"\n            [attr.title]=\"_model.leftButton.ariaLabel\"\n            (click)=\"_onLeftClick()\"\n    ><span class=\"left-icon\" [ngClass]=\"leftIconClass\"></span>\n    </button>\n\n    <div *ngIf=\"_model.viewName === (this.maxView || 'year'); then maxViewLabel else defaultViewLabel;\"></div>\n\n    <button class=\"col dl-abdtp-right-button\"\n            type=\"button\"\n            [attr.aria-label]=\"_model.rightButton.ariaLabel\"\n            [attr.dl-abdtp-value]=\"_model.rightButton.value\"\n            [attr.title]=\"_model.rightButton.ariaLabel\"\n            (click)=\"_onRightClick()\"\n    ><span class=\"right-icon\" [ngClass]=\"rightIconClass\"></span>\n    </button>\n  </div>\n  <div (keydown)=\"_handleKeyDown($event)\">\n    <div *ngIf=\"_model.rowLabels?.length\" class=\"row no-gutters\">\n      <div *ngFor=\"let label of _model.rowLabels\"\n           class=\"col align-items-center no-gutters dl-abdtp-col-label\">{{label}}</div>\n    </div>\n    <div *ngFor=\"let row of _model.rows\" class=\"row align-items-center no-gutters\">\n      <div *ngFor=\"let cell of row.cells\"\n           role=\"gridcell\"\n           class=\"col dl-abdtp-date-button dl-abdtp-{{_model.viewName}}\"\n           [ngClass]=\"cell.classes\"\n           [attr.aria-label]=\"cell.ariaLabel\"\n           [attr.aria-disabled]=\"cell.classes['dl-abdtp-disabled']\"\n           [attr.dl-abdtp-value]=\"cell.value\"\n           [attr.tabindex]=\"cell.classes['dl-abdtp-active'] ? 0 : -1\"\n           (click)=\"_onDateClick(cell)\"\n           (keydown.space)=\"_onDateClick(cell)\"\n           (keydown.enter)=\"_onDateClick(cell)\"\n      >{{cell.display}}</div>\n    </div>\n  </div>\n</div>\n\n<ng-template #maxViewLabel>\n  <div class=\"col-10 dl-abdtp-view-label\">{{_model.viewLabel}}</div>\n</ng-template>\n<ng-template #defaultViewLabel>\n  <button class=\"col-10 dl-abdtp-view-label dl-abdtp-up-button\"\n          type=\"button\"\n          [attr.aria-label]=\"_model.upButton.ariaLabel\"\n          [attr.dl-abdtp-value]=\"_model.upButton.value\"\n          [attr.title]=\"_model.upButton.ariaLabel\"\n          (click)=\"_onUpClick()\"\n          [ngClass]=\"_model.upButton.classes\"\n  >{{_model.viewLabel}}&nbsp;<span class=\"up-icon\" [ngClass]=\"upIconClass\"></span>\n  </button>\n</ng-template>\n",
                styles: [":host{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.dl-abdtp-col-label,.dl-abdtp-view-label{font-weight:700}.dl-abdtp-date-button,.dl-abdtp-left-button,.dl-abdtp-right-button,.dl-abdtp-view-label{padding:5px;border-radius:999px;cursor:pointer;color:rgba(0,0,0,.87);outline:0}.dl-abdtp-date-button,.dl-abdtp-left-button,.dl-abdtp-right-button,.dl-abdtp-up-button{border-width:0}.dl-abdtp-active:focus,.dl-abdtp-date-button:focus,.dl-abdtp-date-button:hover,.dl-abdtp-left-button:focus,.dl-abdtp-left-button:hover,.dl-abdtp-right-button:focus,.dl-abdtp-right-button:hover,.dl-abdtp-up-button:focus,.dl-abdtp-up-button:hover,.dl-abdtp-view-label:focus{background:rgba(0,0,0,.04)}.dl-abdtp-future,.dl-abdtp-past{color:rgba(0,0,0,.04)}.dl-abdtp-now,.dl-abdtp-now.disabled,.dl-abdtp-now.disabled:hover,.dl-abdtp-now:hover{border-radius:999px;border:1px solid rgba(0,0,0,.25)}.dl-abdtp-selected{color:#fff;background:rgba(0,82,204,.75)}.dl-abdtp-selected:focus,.dl-abdtp-selected:hover{background:#0052cc}.dl-abdtp-disabled{cursor:default;color:rgba(0,0,0,.25)}"]
            }] }
];
/** @nocollapse */
DlDateTimePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DlDateAdapter },
    { type: DlYearModelProvider },
    { type: DlMonthModelProvider },
    { type: DlDayModelProvider },
    { type: DlHourModelProvider },
    { type: DlMinuteModelProvider }
];
DlDateTimePickerComponent.propDecorators = {
    change: [{ type: Output }],
    leftIconClass: [{ type: Input }],
    maxView: [{ type: Input }],
    minView: [{ type: Input }],
    minuteStep: [{ type: Input }],
    rightIconClass: [{ type: Input }],
    selectFilter: [{ type: Input }],
    startDate: [{ type: Input }],
    startView: [{ type: Input }],
    upIconClass: [{ type: Input }]
};
if (false) {
    /**
     * Change listener callback functions registered
     * via `registerOnChange`
     * \@internal
     *
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._changed;
    /**
     * Model for the current view.
     *
     * \@internal
     *
     * @type {?}
     */
    DlDateTimePickerComponent.prototype._model;
    /**
     * Maps view name to the next view (the view for the next smallest increment of time).
     * \@internal
     *
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._nextView;
    /**
     * Maps view name to the previous view (the view for the next largest increment of time).
     * \@internal
     *
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._previousView;
    /**
     * Touch listener callback functions registered
     * via `registerOnChange`
     * \@internal
     *
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._touched;
    /**
     * Stores the selected value for this picker.
     * \@internal
     *
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._value;
    /**
     * Maps view name to the model provider for that view.
     * \@internal
     *
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._viewToModelProvider;
    /**
     * Emits when a `change` event when date/time is selected or
     * the value of the date/time picker changes.
     *
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.change;
    /**
     * Specifies the classes used to display the left icon.
     *
     * This component uses OPENICONIC https://useiconic.com/open
     * by default but any icon library may be used.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.leftIconClass;
    /**
     * The highest view that the date/time picker can show.
     * Setting this to a view less than year could make it more
     * difficult for the end-user to navigate to certain dates.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.maxView;
    /**
     * The view that will be used for date/time selection.
     *
     * The default of `minute  means that selection will not happen
     * until the end-user clicks on a cell in the minute view.
     *
     * for example, if you want the end-user to select a only day (date),
     * setting `minView` to `day` will cause selection to happen when the
     * end-user selects a cell in the day view.
     *
     * NOTE: This must be set lower than or equal to `startView'
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.minView;
    /**
     * The number of minutes between each `.dl-abdtp-minute` button.
     *
     * Must be greater than `0` and less than `60`.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.minuteStep;
    /**
     * Specifies the classes used to display the right icon.
     *
     * This component uses OPENICONIC https://useiconic.com/open
     * by default but any icon library may be used.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.rightIconClass;
    /**
     *  Determine whether or not the `DateButton` is selectable by the end user.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.selectFilter;
    /**
     *  Start at the view containing startDate when no value is selected.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.startDate;
    /**
     * The initial view that the date/time picker will show.
     * The picker will also return to this view after a date/time
     * is selected.
     *
     * NOTE: This must be set lower than or equal to `maxView'
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.startView;
    /**
     * Specifies the classes used to display the up icon.
     *
     * This component uses OPENICONIC https://useiconic.com/open
     * by default but any icon library may be used.
     * @type {?}
     */
    DlDateTimePickerComponent.prototype.upIconClass;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype.yearModelComponent;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype.monthModelComponent;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype.dayModelComponent;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype.hourModelComponent;
    /**
     * @type {?}
     * @private
     */
    DlDateTimePickerComponent.prototype.minuteModelComponent;
}
/**
 * \@internal
 * @param {?} value
 * @return {?}
 */
function hasValue(value) {
    return (typeof value !== 'undefined') && (value !== null);
}
//# sourceMappingURL=data:application/json;base64,