/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Input, Output, Renderer2 } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';
import * as _moment from 'moment';
import { DL_DATE_TIME_DISPLAY_FORMAT, DL_DATE_TIME_INPUT_FORMATS, DlDateAdapter } from '../core/public-api';
import { DlDateTimeInputChange } from './dl-date-time-input-change';
/**
 * \@internal
 * @type {?}
 */
const moment = _moment;
/**
 *  This directive allows the user to enter dates, using the keyboard, into an input box and
 *  angular will then store a date value in the model.
 *
 *  The input format(s), display format, and model format are independent and fully customizable.
 * @template D
 */
export class DlDateTimeInputDirective {
    /**
     * Constructs a new instance of this directive.
     * @param {?} _renderer
     *  reference to the renderer.
     * @param {?} _elementRef
     *  reference to this element.
     * @param {?} _dateAdapter
     *  date adapter for the date type in the model.
     * @param {?} _displayFormat
     *  from `DL_DATE_TIME_DISPLAY_FORMAT`, which defines the format to use for a valid date/time value.
     * @param {?} _inputFormats
     *  from `DL_DATE_TIME_INPUT_FORMATS`, which defines the input formats that allowed as valid date/time values.
     *  NB: moment is always in strict parse mode for this directive.
     */
    constructor(_renderer, _elementRef, _dateAdapter, _displayFormat, _inputFormats) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._dateAdapter = _dateAdapter;
        this._displayFormat = _displayFormat;
        this._inputFormats = _inputFormats;
        /* tslint:disable:member-ordering */
        this._filterValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            return (this._inputFilter || ((/**
             * @return {?}
             */
            () => true)))(this._value) ?
                null : { 'dlDateTimeInputFilter': { 'value': control.value } };
        });
        this._inputFilter = (/**
         * @return {?}
         */
        () => true);
        this._isValid = true;
        this._parseValidator = (/**
         * @return {?}
         */
        () => {
            return this._isValid ?
                null : { 'dlDateTimeInputParse': { 'text': this._elementRef.nativeElement.value } };
        });
        this._changed = [];
        this._touched = [];
        this._validator = Validators.compose([this._parseValidator, this._filterValidator]);
        this._validatorOnChange = (/**
         * @return {?}
         */
        () => { });
        this._value = undefined;
        /**
         * Emits when a `change` event when date/time is selected or
         * the value of the date/time picker changes.
         *
         */
        this.dateChange = new EventEmitter();
    }
    /**
     * Set a function used to determine whether or not the `value` entered by the user is allowed.
     * @param {?} inputFilterFunction
     *   a function that returns `true` if the `value` entered by the user is allowed, otherwise `false`.
     * @return {?}
     */
    set dlDateTimeInputFilter(inputFilterFunction) {
        this._inputFilter = inputFilterFunction;
        this._validatorOnChange();
    }
    /* tslint:enable:member-ordering */
    /**
     * Returns `D` value of the date/time input or `undefined` | `null` if no value is set.
     *
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * Emit a `change` event when the value of the input changes.
     * @return {?}
     */
    _onChange() {
        this.dateChange.emit(new DlDateTimeInputChange(this._value));
    }
    /**
     * Format the input text using {\@link DL_DATE_TIME_DISPLAY_FORMAT} and mark the control as touched.
     * @return {?}
     */
    _onBlur() {
        if (this._value) {
            this.writeValue(this._value);
        }
        this._touched.forEach((/**
         * @param {?} onTouched
         * @return {?}
         */
        onTouched => onTouched()));
    }
    /**
     * Parse the user input into a possibly valid date.
     * The model value is not set if the input is NOT one of the {\@link DL_DATE_TIME_INPUT_FORMATS}.
     * @param {?} value
     *   Value of the input control.
     * @return {?}
     */
    _onInput(value) {
        /** @type {?} */
        const testDate = value === null || value === undefined || value === ''
            ? undefined
            : moment(value, this._inputFormats, true);
        this._isValid = testDate && testDate.isValid();
        this._value = this._isValid ? this._dateAdapter.fromMilliseconds(testDate.valueOf()) : undefined;
        this._changed.forEach((/**
         * @param {?} onChanged
         * @return {?}
         */
        onChanged => onChanged(this._value)));
    }
    /**
     * \@internal
     * @param {?} onChange
     * @return {?}
     */
    registerOnChange(onChange) {
        this._changed.push(onChange);
    }
    /**
     * \@internal
     * @param {?} onTouched
     * @return {?}
     */
    registerOnTouched(onTouched) {
        this._touched.push(onTouched);
    }
    /**
     * \@internal
     * @param {?} validatorOnChange
     * @return {?}
     */
    registerOnValidatorChange(validatorOnChange) {
        this._validatorOnChange = validatorOnChange;
    }
    /**
     * \@internal
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    /**
     * \@internal
     * @param {?} control
     * @return {?}
     */
    validate(control) {
        return this._validator(control);
    }
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const normalizedValue = value === null || value === undefined
            ? ''
            : moment(value).format(this._displayFormat);
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    }
}
DlDateTimeInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[dlDateTimeInput]',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DlDateTimeInputDirective)), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DlDateTimeInputDirective)), multi: true }
                ]
            },] }
];
/** @nocollapse */
DlDateTimeInputDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DlDateAdapter },
    { type: String, decorators: [{ type: Inject, args: [DL_DATE_TIME_DISPLAY_FORMAT,] }] },
    { type: Array, decorators: [{ type: Inject, args: [DL_DATE_TIME_INPUT_FORMATS,] }] }
];
DlDateTimeInputDirective.propDecorators = {
    dateChange: [{ type: Output }],
    dlDateTimeInputFilter: [{ type: Input }],
    _onChange: [{ type: HostListener, args: ['change',] }],
    _onBlur: [{ type: HostListener, args: ['blur',] }],
    _onInput: [{ type: HostListener, args: ['input', ['$event.target.value'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._filterValidator;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._inputFilter;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._isValid;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._parseValidator;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._changed;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._touched;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._validator;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._validatorOnChange;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._value;
    /**
     * Emits when a `change` event when date/time is selected or
     * the value of the date/time picker changes.
     *
     * @type {?}
     */
    DlDateTimeInputDirective.prototype.dateChange;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._displayFormat;
    /**
     * @type {?}
     * @private
     */
    DlDateTimeInputDirective.prototype._inputFormats;
}
//# sourceMappingURL=data:application/json;base64,