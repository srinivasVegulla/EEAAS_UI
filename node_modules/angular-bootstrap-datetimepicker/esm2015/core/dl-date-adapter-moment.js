/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as _moment from 'moment';
import { DlDateAdapter } from './dl-date-adapter';
/**
 * Work around for moment namespace conflict when used with webpack and rollup.
 * See https://github.com/dherges/ng-packagr/issues/163
 *
 * Depending on whether rollup is used, moment needs to be imported differently.
 * Since Moment.js doesn't have a default export, we normally need to import using
 * the `* as`syntax.
 *
 * rollup creates a synthetic default module and we thus need to import it using
 * the `default as` syntax.
 *
 * \@internal
 *
 * @type {?}
 */
const moment = _moment;
/**
 * Adapts `moment` to be usable as a date by date/time components that work with dates.
 *
 */
export class DlDateAdapterMoment extends DlDateAdapter {
    /**
     * Create a new instance of a `moment` type from milliseconds.
     * @param {?} milliseconds
     *  a time value as milliseconds (local time zone)
     * @return {?}
     *  an instance of `moment` for the specified moment in time.
     */
    fromMilliseconds(milliseconds) {
        return moment(milliseconds);
    }
    /**
     * Returns a moment in time value as milliseconds (local time zone).
     * @param {?} value
     *  a moment or `null`.
     * @return {?}
     *  a `moment.valueOf()` result for the specified `moment` or `null`
     */
    toMilliseconds(value) {
        return (value) ? value.valueOf() : undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS1hZGFwdGVyLW1vbWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLyIsInNvdXJjZXMiOlsiY29yZS9kbC1kYXRlLWFkYXB0ZXItbW9tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7TUFlMUMsTUFBTSxHQUFHLE9BQU87Ozs7O0FBS3RCLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxhQUFxQjs7Ozs7Ozs7SUFTNUQsZ0JBQWdCLENBQUMsWUFBb0I7UUFDbkMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7Ozs7SUFTRCxjQUFjLENBQUMsS0FBb0I7UUFDakMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMvQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQge01vbWVudH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7RGxEYXRlQWRhcHRlcn0gZnJvbSAnLi9kbC1kYXRlLWFkYXB0ZXInO1xuXG4vKipcbiAqIFdvcmsgYXJvdW5kIGZvciBtb21lbnQgbmFtZXNwYWNlIGNvbmZsaWN0IHdoZW4gdXNlZCB3aXRoIHdlYnBhY2sgYW5kIHJvbGx1cC5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZGhlcmdlcy9uZy1wYWNrYWdyL2lzc3Vlcy8xNjNcbiAqXG4gKiBEZXBlbmRpbmcgb24gd2hldGhlciByb2xsdXAgaXMgdXNlZCwgbW9tZW50IG5lZWRzIHRvIGJlIGltcG9ydGVkIGRpZmZlcmVudGx5LlxuICogU2luY2UgTW9tZW50LmpzIGRvZXNuJ3QgaGF2ZSBhIGRlZmF1bHQgZXhwb3J0LCB3ZSBub3JtYWxseSBuZWVkIHRvIGltcG9ydCB1c2luZ1xuICogdGhlIGAqIGFzYHN5bnRheC5cbiAqXG4gKiByb2xsdXAgY3JlYXRlcyBhIHN5bnRoZXRpYyBkZWZhdWx0IG1vZHVsZSBhbmQgd2UgdGh1cyBuZWVkIHRvIGltcG9ydCBpdCB1c2luZ1xuICogdGhlIGBkZWZhdWx0IGFzYCBzeW50YXguXG4gKlxuICogQGludGVybmFsXG4gKiovXG5jb25zdCBtb21lbnQgPSBfbW9tZW50O1xuXG4vKipcbiAqIEFkYXB0cyBgbW9tZW50YCB0byBiZSB1c2FibGUgYXMgYSBkYXRlIGJ5IGRhdGUvdGltZSBjb21wb25lbnRzIHRoYXQgd29yayB3aXRoIGRhdGVzLlxuICoqL1xuZXhwb3J0IGNsYXNzIERsRGF0ZUFkYXB0ZXJNb21lbnQgZXh0ZW5kcyBEbERhdGVBZGFwdGVyPE1vbWVudD4ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSBgbW9tZW50YCB0eXBlIGZyb20gbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0gbWlsbGlzZWNvbmRzXG4gICAqICBhIHRpbWUgdmFsdWUgYXMgbWlsbGlzZWNvbmRzIChsb2NhbCB0aW1lIHpvbmUpXG4gICAqIEByZXR1cm5zXG4gICAqICBhbiBpbnN0YW5jZSBvZiBgbW9tZW50YCBmb3IgdGhlIHNwZWNpZmllZCBtb21lbnQgaW4gdGltZS5cbiAgICovXG4gIGZyb21NaWxsaXNlY29uZHMobWlsbGlzZWNvbmRzOiBudW1iZXIpOiBNb21lbnQge1xuICAgIHJldHVybiBtb21lbnQobWlsbGlzZWNvbmRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbW9tZW50IGluIHRpbWUgdmFsdWUgYXMgbWlsbGlzZWNvbmRzIChsb2NhbCB0aW1lIHpvbmUpLlxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICogIGEgbW9tZW50IG9yIGBudWxsYC5cbiAgICogQHJldHVybnNcbiAgICogIGEgYG1vbWVudC52YWx1ZU9mKClgIHJlc3VsdCBmb3IgdGhlIHNwZWNpZmllZCBgbW9tZW50YCBvciBgbnVsbGBcbiAgICovXG4gIHRvTWlsbGlzZWNvbmRzKHZhbHVlOiBNb21lbnQgfCBudWxsKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgcmV0dXJuICh2YWx1ZSkgPyB2YWx1ZS52YWx1ZU9mKCkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==