/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import * as _moment from 'moment';
/**
 * \@internal
 * @type {?}
 */
let moment = _moment;
/* istanbul ignore if */
if ('default' in _moment) {
    moment = _moment['default'];
}
/**
 * InjectionToken for string dates that can be used to override default model format.
 *
 * @type {?}
 */
export const DL_DATE_TIME_DISPLAY_FORMAT = new InjectionToken('DL_DATE_TIME_DISPLAY_FORMAT');
/**
 * `Moment`'s long date format `lll` used as the default output format
 * for string date's
 * @type {?}
 */
export const DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT = moment.localeData().longDateFormat('lll');
/**
 * InjectionToken for string dates that can be used to override default input formats.
 *
 * @type {?}
 */
export const DL_DATE_TIME_INPUT_FORMATS = new InjectionToken('DL_DATE__TIME_INPUT_FORMATS');
/**
 *  Default input format's used by `DlDateAdapterString`
 * @type {?}
 */
export const DL_DATE_TIME_INPUT_FORMATS_DEFAULT = [
    'YYYY-MM-DDTHH:mm',
    'YYYY-MM-DDTHH:mm:ss',
    'YYYY-MM-DDTHH:mm:ss.SSS',
    'YYYY-MM-DD',
    'M/D/YYYY h:m:s A',
    'M/D/YYYY h:m A',
    'M/D/YYYY h:m A',
    'M/D/YYYY',
    'M/D/YY h:m:s A',
    'M/D/YY h:m A',
    'M/D/YY h A',
    'M/D/YY',
    DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT,
    moment.ISO_8601,
];
/**
 * InjectionToken for string dates that can be used to override default model format.
 *
 * @type {?}
 */
export const DL_DATE_TIME_MODEL_FORMAT = new InjectionToken('DL_DATE_TIME_MODEL_FORMAT');
/**
 *  Default model format (ISO 8601)`
 * @type {?}
 */
export const DL_DATE_TIME_MODEL_FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ss.SSSZ';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS10aW1lLXN0cmluZy1mb3JtYXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWJvb3RzdHJhcC1kYXRldGltZXBpY2tlci8iLCJzb3VyY2VzIjpbImNvcmUvZGwtZGF0ZS10aW1lLXN0cmluZy1mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFN0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxRQUFRLENBQUM7Ozs7O0lBSzlCLE1BQU0sR0FBRyxPQUFPOztBQUVwQixJQUFJLFNBQVMsSUFBSSxPQUFPLEVBQUU7SUFDeEIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUM3Qjs7Ozs7O0FBS0QsTUFBTSxPQUFPLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUFTLDZCQUE2QixDQUFDOzs7Ozs7QUFNcEcsTUFBTSxPQUFPLG1DQUFtQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDOzs7Ozs7QUFLNUYsTUFBTSxPQUFPLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUFXLDZCQUE2QixDQUFDOzs7OztBQUtyRyxNQUFNLE9BQU8sa0NBQWtDLEdBQUc7SUFDaEQsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLFlBQVk7SUFDWixRQUFRO0lBQ1IsbUNBQW1DO0lBQ25DLE1BQU0sQ0FBQyxRQUFRO0NBQ2hCOzs7Ozs7QUFLRCxNQUFNLE9BQU8seUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQVMsMkJBQTJCLENBQUM7Ozs7O0FBS2hHLE1BQU0sT0FBTyxpQ0FBaUMsR0FBRywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0ICogYXMgX21vbWVudCBmcm9tICdtb21lbnQnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5sZXQgbW9tZW50ID0gX21vbWVudDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKCdkZWZhdWx0JyBpbiBfbW9tZW50KSB7XG4gIG1vbWVudCA9IF9tb21lbnRbJ2RlZmF1bHQnXTtcbn1cblxuLyoqXG4gKiBJbmplY3Rpb25Ub2tlbiBmb3Igc3RyaW5nIGRhdGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gb3ZlcnJpZGUgZGVmYXVsdCBtb2RlbCBmb3JtYXQuXG4gKiovXG5leHBvcnQgY29uc3QgRExfREFURV9USU1FX0RJU1BMQVlfRk9STUFUID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0RMX0RBVEVfVElNRV9ESVNQTEFZX0ZPUk1BVCcpO1xuXG4vKipcbiAqIGBNb21lbnRgJ3MgbG9uZyBkYXRlIGZvcm1hdCBgbGxsYCB1c2VkIGFzIHRoZSBkZWZhdWx0IG91dHB1dCBmb3JtYXRcbiAqIGZvciBzdHJpbmcgZGF0ZSdzXG4gKi9cbmV4cG9ydCBjb25zdCBETF9EQVRFX1RJTUVfRElTUExBWV9GT1JNQVRfREVGQVVMVCA9IG1vbWVudC5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoJ2xsbCcpO1xuXG4vKipcbiAqIEluamVjdGlvblRva2VuIGZvciBzdHJpbmcgZGF0ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBvdmVycmlkZSBkZWZhdWx0IGlucHV0IGZvcm1hdHMuXG4gKiovXG5leHBvcnQgY29uc3QgRExfREFURV9USU1FX0lOUFVUX0ZPUk1BVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nW10+KCdETF9EQVRFX19USU1FX0lOUFVUX0ZPUk1BVFMnKTtcblxuLyoqXG4gKiAgRGVmYXVsdCBpbnB1dCBmb3JtYXQncyB1c2VkIGJ5IGBEbERhdGVBZGFwdGVyU3RyaW5nYFxuICovXG5leHBvcnQgY29uc3QgRExfREFURV9USU1FX0lOUFVUX0ZPUk1BVFNfREVGQVVMVCA9IFtcbiAgJ1lZWVktTU0tRERUSEg6bW0nLFxuICAnWVlZWS1NTS1ERFRISDptbTpzcycsXG4gICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsXG4gICdZWVlZLU1NLUREJyxcbiAgJ00vRC9ZWVlZIGg6bTpzIEEnLFxuICAnTS9EL1lZWVkgaDptIEEnLFxuICAnTS9EL1lZWVkgaDptIEEnLFxuICAnTS9EL1lZWVknLFxuICAnTS9EL1lZIGg6bTpzIEEnLFxuICAnTS9EL1lZIGg6bSBBJyxcbiAgJ00vRC9ZWSBoIEEnLFxuICAnTS9EL1lZJyxcbiAgRExfREFURV9USU1FX0RJU1BMQVlfRk9STUFUX0RFRkFVTFQsXG4gIG1vbWVudC5JU09fODYwMSxcbl07XG5cbi8qKlxuICogSW5qZWN0aW9uVG9rZW4gZm9yIHN0cmluZyBkYXRlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIGRlZmF1bHQgbW9kZWwgZm9ybWF0LlxuICoqL1xuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9NT0RFTF9GT1JNQVQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignRExfREFURV9USU1FX01PREVMX0ZPUk1BVCcpO1xuXG4vKipcbiAqICBEZWZhdWx0IG1vZGVsIGZvcm1hdCAoSVNPIDg2MDEpYFxuICovXG5leHBvcnQgY29uc3QgRExfREFURV9USU1FX01PREVMX0ZPUk1BVF9ERUZBVUxUID0gJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTWic7XG4iXX0=