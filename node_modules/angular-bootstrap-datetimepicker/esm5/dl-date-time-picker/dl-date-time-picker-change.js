/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright 2013-present Dale Lotts All Rights Reserved.
 * http://www.dalelotts.com
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE
 */
/**
 * Emitted when the value of a date/time picker changes.
 * @template D
 */
var /**
 * Emitted when the value of a date/time picker changes.
 * @template D
 */
DlDateTimePickerChange = /** @class */ (function () {
    /**
     * Constructs a new instance.
     * @param newValue
     *  the new value of the date/time picker.
     */
    function DlDateTimePickerChange(newValue) {
        this._value = newValue;
    }
    Object.defineProperty(DlDateTimePickerChange.prototype, "value", {
        /**
         * Get the new value of the date/time picker.
         * @returns the new value or null.
         */
        get: /**
         * Get the new value of the date/time picker.
         * @return {?} the new value or null.
         */
        function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return DlDateTimePickerChange;
}());
/**
 * Emitted when the value of a date/time picker changes.
 * @template D
 */
export { DlDateTimePickerChange };
if (false) {
    /**
     * The new value of the picker.
     * @type {?}
     * @private
     */
    DlDateTimePickerChange.prototype._value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS10aW1lLXBpY2tlci1jaGFuZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWJvb3RzdHJhcC1kYXRldGltZXBpY2tlci8iLCJzb3VyY2VzIjpbImRsLWRhdGUtdGltZS1waWNrZXIvZGwtZGF0ZS10aW1lLXBpY2tlci1jaGFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQVlBOzs7OztJQU9FOzs7O09BSUc7SUFDSCxnQ0FBWSxRQUFXO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFNRCxzQkFBSSx5Q0FBSztRQUpUOzs7V0FHRzs7Ozs7UUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUNILDZCQUFDO0FBQUQsQ0FBQyxBQXZCRCxJQXVCQzs7Ozs7Ozs7Ozs7O0lBbEJDLHdDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQgRGFsZSBMb3R0cyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogaHR0cDovL3d3dy5kYWxlbG90dHMuY29tXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL2RhbGVsb3R0cy9hbmd1bGFyLWJvb3RzdHJhcC1kYXRldGltZXBpY2tlci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHZhbHVlIG9mIGEgZGF0ZS90aW1lIHBpY2tlciBjaGFuZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgRGxEYXRlVGltZVBpY2tlckNoYW5nZTxEPiB7XG5cbiAgLyoqXG4gICAqIFRoZSBuZXcgdmFsdWUgb2YgdGhlIHBpY2tlci5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX3ZhbHVlOiBEO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlLlxuICAgKiBAcGFyYW0gbmV3VmFsdWVcbiAgICogIHRoZSBuZXcgdmFsdWUgb2YgdGhlIGRhdGUvdGltZSBwaWNrZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuZXdWYWx1ZTogRCkge1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuZXcgdmFsdWUgb2YgdGhlIGRhdGUvdGltZSBwaWNrZXIuXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgdmFsdWUgb3IgbnVsbC5cbiAgICovXG4gIGdldCB2YWx1ZSgpOiBEIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cbn1cbiJdfQ==