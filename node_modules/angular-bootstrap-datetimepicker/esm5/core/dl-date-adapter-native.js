/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DlDateAdapter } from './dl-date-adapter';
/**
 * Adapts `Date` to be usable as a date by date/time components that work with dates.
 *
 */
var /**
 * Adapts `Date` to be usable as a date by date/time components that work with dates.
 *
 */
DlDateAdapterNative = /** @class */ (function (_super) {
    tslib_1.__extends(DlDateAdapterNative, _super);
    function DlDateAdapterNative() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new instance of a `moment` type from milliseconds.
     * @param milliseconds
     *  a time value as milliseconds (local time zone)
     * @returns
     *  an instance of `moment` for the specified moment in time.
     */
    /**
     * Create a new instance of a `moment` type from milliseconds.
     * @param {?} milliseconds
     *  a time value as milliseconds (local time zone)
     * @return {?}
     *  an instance of `moment` for the specified moment in time.
     */
    DlDateAdapterNative.prototype.fromMilliseconds = /**
     * Create a new instance of a `moment` type from milliseconds.
     * @param {?} milliseconds
     *  a time value as milliseconds (local time zone)
     * @return {?}
     *  an instance of `moment` for the specified moment in time.
     */
    function (milliseconds) {
        return new Date(milliseconds);
    };
    /**
     * Returns a moment in time value as milliseconds (local time zone).
     * @param value
     *  a Date or null.
     * @returns
     *  a `value.getTime()` result for the specified `Date` or `null`.
     */
    /**
     * Returns a moment in time value as milliseconds (local time zone).
     * @param {?} value
     *  a Date or null.
     * @return {?}
     *  a `value.getTime()` result for the specified `Date` or `null`.
     */
    DlDateAdapterNative.prototype.toMilliseconds = /**
     * Returns a moment in time value as milliseconds (local time zone).
     * @param {?} value
     *  a Date or null.
     * @return {?}
     *  a `value.getTime()` result for the specified `Date` or `null`.
     */
    function (value) {
        return (value) ? value.getTime() : undefined;
    };
    return DlDateAdapterNative;
}(DlDateAdapter));
/**
 * Adapts `Date` to be usable as a date by date/time components that work with dates.
 *
 */
export { DlDateAdapterNative };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS1hZGFwdGVyLW5hdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLyIsInNvdXJjZXMiOlsiY29yZS9kbC1kYXRlLWFkYXB0ZXItbmF0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7OztBQUtoRDs7Ozs7SUFBeUMsK0NBQW1CO0lBQTVEOztJQXVCQSxDQUFDO0lBdEJDOzs7Ozs7T0FNRzs7Ozs7Ozs7SUFDSCw4Q0FBZ0I7Ozs7Ozs7SUFBaEIsVUFBaUIsWUFBb0I7UUFDbkMsT0FBTyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBR0Q7Ozs7OztPQU1HOzs7Ozs7OztJQUNILDRDQUFjOzs7Ozs7O0lBQWQsVUFBZSxLQUFrQjtRQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQy9DLENBQUM7SUFDSCwwQkFBQztBQUFELENBQUMsQUF2QkQsQ0FBeUMsYUFBYSxHQXVCckQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RsRGF0ZUFkYXB0ZXJ9IGZyb20gJy4vZGwtZGF0ZS1hZGFwdGVyJztcblxuLyoqXG4gKiBBZGFwdHMgYERhdGVgIHRvIGJlIHVzYWJsZSBhcyBhIGRhdGUgYnkgZGF0ZS90aW1lIGNvbXBvbmVudHMgdGhhdCB3b3JrIHdpdGggZGF0ZXMuXG4gKiovXG5leHBvcnQgY2xhc3MgRGxEYXRlQWRhcHRlck5hdGl2ZSBleHRlbmRzIERsRGF0ZUFkYXB0ZXI8RGF0ZT4ge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgYG1vbWVudGAgdHlwZSBmcm9tIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIG1pbGxpc2Vjb25kc1xuICAgKiAgYSB0aW1lIHZhbHVlIGFzIG1pbGxpc2Vjb25kcyAobG9jYWwgdGltZSB6b25lKVxuICAgKiBAcmV0dXJuc1xuICAgKiAgYW4gaW5zdGFuY2Ugb2YgYG1vbWVudGAgZm9yIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXG4gICAqL1xuICBmcm9tTWlsbGlzZWNvbmRzKG1pbGxpc2Vjb25kczogbnVtYmVyKTogRGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKG1pbGxpc2Vjb25kcyk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbW9tZW50IGluIHRpbWUgdmFsdWUgYXMgbWlsbGlzZWNvbmRzIChsb2NhbCB0aW1lIHpvbmUpLlxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICogIGEgRGF0ZSBvciBudWxsLlxuICAgKiBAcmV0dXJuc1xuICAgKiAgYSBgdmFsdWUuZ2V0VGltZSgpYCByZXN1bHQgZm9yIHRoZSBzcGVjaWZpZWQgYERhdGVgIG9yIGBudWxsYC5cbiAgICovXG4gIHRvTWlsbGlzZWNvbmRzKHZhbHVlOiBEYXRlIHwgbnVsbCk6IG51bWJlciB8IG51bGwge1xuICAgIHJldHVybiAodmFsdWUpID8gdmFsdWUuZ2V0VGltZSgpIDogdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=