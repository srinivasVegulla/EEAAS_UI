(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng-fullcalendar', ['exports', '@fullcalendar/core', '@angular/core'], factory) :
    (factory((global['ng-fullcalendar'] = {}),global.core,global.ng.core));
}(this, (function (exports,core,core$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CalendarComponent = /** @class */ (function () {
        function CalendarComponent(element) {
            this.element = element;
            this.initialized = new core$1.EventEmitter();
            this.eventClick = new core$1.EventEmitter();
            this.eventMouseEnter = new core$1.EventEmitter();
            this.eventMouseLeave = new core$1.EventEmitter();
            this.eventDragStart = new core$1.EventEmitter();
            this.eventDragStop = new core$1.EventEmitter();
            this.eventDrop = new core$1.EventEmitter();
            this.eventResizeStart = new core$1.EventEmitter();
            this.eventResizeStop = new core$1.EventEmitter();
            this.eventLeave = new core$1.EventEmitter();
            this.eventResize = new core$1.EventEmitter();
            this.eventResizableFromStart = new core$1.EventEmitter();
            this.allDayMaintainDuration = new core$1.EventEmitter();
            this.dragScroll = new core$1.EventEmitter();
            this.eventConstraint = new core$1.EventEmitter();
            this.eventReceive = new core$1.EventEmitter();
            this.drop = new core$1.EventEmitter();
            this.select = new core$1.EventEmitter();
            this.dateClick = new core$1.EventEmitter();
            this.clickButton = new core$1.EventEmitter();
            this.fullcalendarEvents = [
                'eventClick',
                'eventMouseEnter',
                'eventMouseLeave',
                'eventDragStart',
                'eventDragStop',
                'eventDrop',
                'eventResizeStart',
                'eventResizeStop',
                'eventLeave',
                'eventResize',
                'eventResizableFromStart',
                'allDayMaintainDuration',
                'dragScroll',
                'eventReceive',
                'drop',
                'select',
                'dateClick'
            ];
            this._reRender = true;
        }
        Object.defineProperty(CalendarComponent.prototype, "eventsModel", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._eventsModel = value;
                if (this._reRender) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.renderEvents(value);
                    }), 50);
                }
                else {
                    this._reRender = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.updateOptions();
                this.calendar = new core.Calendar(this.element.nativeElement, this.options);
                this.calendar.render();
                this.initialized.emit();
                this.element.nativeElement.addEventListener('click', ( /**
                 * @param {?} ev
                 * @return {?}
                 */function (ev) {
                    /** @type {?} */
                    var closest = ev.target.closest('button');
                    if (closest) {
                        /** @type {?} */
                        var classnames = ev.srcElement.className.split(' ');
                        classnames.forEach(( /**
                         * @param {?} name
                         * @return {?}
                         */function (name) {
                            if (name.indexOf('button') === name.length - 6) {
                                name = name.replace(/fc|button|-/g, '');
                                if (name != '') {
                                    _this.buttonEventDispatch(name);
                                }
                            }
                            else if (name.indexOf('chevron')) {
                                name = name.replace(/fc|icon|chevron|-/g, '');
                                switch (name) {
                                    case 'right':
                                        _this.buttonEventDispatch('next');
                                        break;
                                    case 'left':
                                        _this.buttonEventDispatch('prev');
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }));
                    }
                }));
            };
        /**
         * @private
         * @param {?} buttonType
         * @return {?}
         */
        CalendarComponent.prototype.buttonEventDispatch = /**
         * @private
         * @param {?} buttonType
         * @return {?}
         */
            function (buttonType) {
                /** @type {?} */
                var currentDetail = {
                    buttonType: buttonType,
                    data: this.calendar.getDate()
                };
                this.clickButton.emit(currentDetail);
            };
        /**
         * @private
         * @return {?}
         */
        CalendarComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.fullcalendarEvents.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    if (!_this.options[element]) {
                        _this.options[element] = ( /**
                         * @param {?} info
                         * @return {?}
                         */function (info) {
                            _this[element].emit(info);
                        });
                    }
                }));
            };
        /**
         * @private
         * @param {?} events
         * @return {?}
         */
        CalendarComponent.prototype.renderEvents = /**
         * @private
         * @param {?} events
         * @return {?}
         */
            function (events) {
                var _this = this;
                // https://fullcalendar.io/docs/Calendar-batchRendering
                if (events && events.length) {
                    this.calendar.batchRendering(( /**
                     * @return {?}
                     */function () {
                        _this.calendar.removeAllEvents();
                        events.forEach(( /**
                         * @param {?} ev
                         * @return {?}
                         */function (ev) {
                            _this.calendar.addEvent(ev);
                        }));
                    }));
                    this.calendar.rerenderEvents();
                }
            };
        CalendarComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'ng-fullcalendar',
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        CalendarComponent.ctorParameters = function () {
            return [
                { type: core$1.ElementRef }
            ];
        };
        CalendarComponent.propDecorators = {
            options: [{ type: core$1.Input }],
            initialized: [{ type: core$1.Output }],
            eventClick: [{ type: core$1.Output }],
            eventMouseEnter: [{ type: core$1.Output }],
            eventMouseLeave: [{ type: core$1.Output }],
            eventDragStart: [{ type: core$1.Output }],
            eventDragStop: [{ type: core$1.Output }],
            eventDrop: [{ type: core$1.Output }],
            eventResizeStart: [{ type: core$1.Output }],
            eventResizeStop: [{ type: core$1.Output }],
            eventLeave: [{ type: core$1.Output }],
            eventResize: [{ type: core$1.Output }],
            eventResizableFromStart: [{ type: core$1.Output }],
            allDayMaintainDuration: [{ type: core$1.Output }],
            dragScroll: [{ type: core$1.Output }],
            eventConstraint: [{ type: core$1.Output }],
            eventReceive: [{ type: core$1.Output }],
            drop: [{ type: core$1.Output }],
            select: [{ type: core$1.Output }],
            dateClick: [{ type: core$1.Output }],
            clickButton: [{ type: core$1.Output }],
            eventsModel: [{ type: core$1.Input, args: ['eventsModel',] }]
        };
        return CalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FullCalendarModule = /** @class */ (function () {
        function FullCalendarModule() {
        }
        FullCalendarModule.decorators = [
            { type: core$1.NgModule, args: [{
                        declarations: [CalendarComponent],
                        imports: [],
                        exports: [CalendarComponent]
                    },] }
        ];
        return FullCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.CalendarComponent = CalendarComponent;
    exports.FullCalendarModule = FullCalendarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-fullcalendar.umd.js.map