import { Calendar } from '@fullcalendar/core';
import { Component, ElementRef, Input, EventEmitter, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(element) {
        this.element = element;
        this.initialized = new EventEmitter();
        this.eventClick = new EventEmitter();
        this.eventMouseEnter = new EventEmitter();
        this.eventMouseLeave = new EventEmitter();
        this.eventDragStart = new EventEmitter();
        this.eventDragStop = new EventEmitter();
        this.eventDrop = new EventEmitter();
        this.eventResizeStart = new EventEmitter();
        this.eventResizeStop = new EventEmitter();
        this.eventLeave = new EventEmitter();
        this.eventResize = new EventEmitter();
        this.eventResizableFromStart = new EventEmitter();
        this.allDayMaintainDuration = new EventEmitter();
        this.dragScroll = new EventEmitter();
        this.eventConstraint = new EventEmitter();
        this.eventReceive = new EventEmitter();
        this.drop = new EventEmitter();
        this.select = new EventEmitter();
        this.dateClick = new EventEmitter();
        this.clickButton = new EventEmitter();
        this.fullcalendarEvents = [
            'eventClick',
            'eventMouseEnter',
            'eventMouseLeave',
            'eventDragStart',
            'eventDragStop',
            'eventDrop',
            'eventResizeStart',
            'eventResizeStop',
            'eventLeave',
            'eventResize',
            'eventResizableFromStart',
            'allDayMaintainDuration',
            'dragScroll',
            'eventReceive',
            'drop',
            'select',
            'dateClick'
        ];
        this._reRender = true;
    }
    Object.defineProperty(CalendarComponent.prototype, "eventsModel", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._eventsModel = value;
            if (this._reRender) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.renderEvents(value);
                }), 50);
            }
            else {
                this._reRender = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateOptions();
        this.calendar = new Calendar(this.element.nativeElement, this.options);
        this.calendar.render();
        this.initialized.emit();
        this.element.nativeElement.addEventListener('click', (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) {
            /** @type {?} */
            var closest = ev.target.closest('button');
            if (closest) {
                /** @type {?} */
                var classnames = ev.srcElement.className.split(' ');
                classnames.forEach((/**
                 * @param {?} name
                 * @return {?}
                 */
                function (name) {
                    if (name.indexOf('button') === name.length - 6) {
                        name = name.replace(/fc|button|-/g, '');
                        if (name != '') {
                            _this.buttonEventDispatch(name);
                        }
                    }
                    else if (name.indexOf('chevron')) {
                        name = name.replace(/fc|icon|chevron|-/g, '');
                        switch (name) {
                            case 'right':
                                _this.buttonEventDispatch('next');
                                break;
                            case 'left':
                                _this.buttonEventDispatch('prev');
                                break;
                            default:
                                break;
                        }
                    }
                }));
            }
        }));
    };
    /**
     * @private
     * @param {?} buttonType
     * @return {?}
     */
    CalendarComponent.prototype.buttonEventDispatch = /**
     * @private
     * @param {?} buttonType
     * @return {?}
     */
    function (buttonType) {
        /** @type {?} */
        var currentDetail = {
            buttonType: buttonType,
            data: this.calendar.getDate()
        };
        this.clickButton.emit(currentDetail);
    };
    /**
     * @private
     * @return {?}
     */
    CalendarComponent.prototype.updateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.fullcalendarEvents.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (!_this.options[element]) {
                _this.options[element] = (/**
                 * @param {?} info
                 * @return {?}
                 */
                function (info) {
                    _this[element].emit(info);
                });
            }
        }));
    };
    /**
     * @private
     * @param {?} events
     * @return {?}
     */
    CalendarComponent.prototype.renderEvents = /**
     * @private
     * @param {?} events
     * @return {?}
     */
    function (events) {
        var _this = this;
        // https://fullcalendar.io/docs/Calendar-batchRendering
        if (events && events.length) {
            this.calendar.batchRendering((/**
             * @return {?}
             */
            function () {
                _this.calendar.removeAllEvents();
                events.forEach((/**
                 * @param {?} ev
                 * @return {?}
                 */
                function (ev) {
                    _this.calendar.addEvent(ev);
                }));
            }));
            this.calendar.rerenderEvents();
        }
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-fullcalendar',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CalendarComponent.propDecorators = {
        options: [{ type: Input }],
        initialized: [{ type: Output }],
        eventClick: [{ type: Output }],
        eventMouseEnter: [{ type: Output }],
        eventMouseLeave: [{ type: Output }],
        eventDragStart: [{ type: Output }],
        eventDragStop: [{ type: Output }],
        eventDrop: [{ type: Output }],
        eventResizeStart: [{ type: Output }],
        eventResizeStop: [{ type: Output }],
        eventLeave: [{ type: Output }],
        eventResize: [{ type: Output }],
        eventResizableFromStart: [{ type: Output }],
        allDayMaintainDuration: [{ type: Output }],
        dragScroll: [{ type: Output }],
        eventConstraint: [{ type: Output }],
        eventReceive: [{ type: Output }],
        drop: [{ type: Output }],
        select: [{ type: Output }],
        dateClick: [{ type: Output }],
        clickButton: [{ type: Output }],
        eventsModel: [{ type: Input, args: ['eventsModel',] }]
    };
    return CalendarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FullCalendarModule = /** @class */ (function () {
    function FullCalendarModule() {
    }
    FullCalendarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [CalendarComponent],
                    imports: [],
                    exports: [CalendarComponent]
                },] }
    ];
    return FullCalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CalendarComponent, FullCalendarModule };

//# sourceMappingURL=ng-fullcalendar.js.map